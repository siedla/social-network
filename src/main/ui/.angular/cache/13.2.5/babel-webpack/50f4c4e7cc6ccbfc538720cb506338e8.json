{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\micha\\\\OneDrive\\\\Pulpit\\\\Kurs Spring\\\\task\\\\social-network\\\\src\\\\main\\\\ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.usersUrl = 'http://localhost:8081/users';\n  }\n\n  findAll() {\n    return this.http.get(this.usersUrl);\n  } //dokonczyc\n\n\n  findPostsByUserId() {\n    return this.http.get(this.usersUrl + \"/1/posts\");\n  }\n\n  getUserByEmail(email) {\n    return this.http.get(this.usersUrl + \"/email/\" + email);\n  }\n\n  findUserByName(firstName, lastName) {\n    return this.http.get(this.usersUrl + \"/\" + firstName + \"/\" + lastName);\n  }\n\n  addNewUser(user) {\n    return this.http.post('http://localhost:8081/signUp', user);\n  }\n\n  addFriend(user, friendId) {\n    return this.http.post(this.usersUrl + \"/\" + user.id + \"/\" + friendId, user);\n  }\n\n  authenticate(email, password) {\n    return this.http.post(\"http://localhost:8081/authenticate\", {\n      email,\n      password\n    }).pipe(map(userData => {\n      sessionStorage.setItem(\"email\", email);\n      sessionStorage.setItem(\"user\", JSON.stringify(userData.user));\n      let tokenStr = \"Bearer \" + userData.token;\n      sessionStorage.setItem(\"token\", tokenStr);\n      return userData;\n    }));\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"email\");\n    return !(user === null);\n  }\n\n  logOut() {\n    sessionStorage.removeItem(\"email\");\n    sessionStorage.removeItem(\"user\");\n  }\n\n  getCurrentUser() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      //let currentUser:User = JSON.parse(sessionStorage.getItem(\"user\")!) as User;\n      //return currentUser;\n      console.log(sessionStorage.getItem(\"email\"));\n      let currentUser;\n      yield _this.getUserByEmail(sessionStorage.getItem(\"email\")).subscribe(data => {\n        currentUser = data;\n        console.log(data);\n      });\n      console.log(\"test: \" + currentUser);\n      return currentUser;\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/micha/OneDrive/Pulpit/Kurs Spring/task/social-network/src/main/ui/src/app/services/user.service.ts"],"names":["map","i0","i1","UserService","constructor","http","usersUrl","findAll","get","findPostsByUserId","getUserByEmail","email","findUserByName","firstName","lastName","addNewUser","user","post","addFriend","friendId","id","authenticate","password","pipe","userData","sessionStorage","setItem","JSON","stringify","tokenStr","token","isUserLoggedIn","getItem","logOut","removeItem","getCurrentUser","console","log","currentUser","subscribe","data","ɵfac","UserService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { map } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class UserService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.usersUrl = 'http://localhost:8081/users';\r\n    }\r\n    findAll() {\r\n        return this.http.get(this.usersUrl);\r\n    }\r\n    //dokonczyc\r\n    findPostsByUserId() {\r\n        return this.http.get(this.usersUrl + \"/1/posts\");\r\n    }\r\n    getUserByEmail(email) {\r\n        return this.http.get(this.usersUrl + \"/email/\" + email);\r\n    }\r\n    findUserByName(firstName, lastName) {\r\n        return this.http.get(this.usersUrl + \"/\" + firstName + \"/\" + lastName);\r\n    }\r\n    addNewUser(user) {\r\n        return this.http.post('http://localhost:8081/signUp', user);\r\n    }\r\n    addFriend(user, friendId) {\r\n        return this.http.post(this.usersUrl + \"/\" + user.id + \"/\" + friendId, user);\r\n    }\r\n    authenticate(email, password) {\r\n        return this.http\r\n            .post(\"http://localhost:8081/authenticate\", { email, password })\r\n            .pipe(map(userData => {\r\n            sessionStorage.setItem(\"email\", email);\r\n            sessionStorage.setItem(\"user\", JSON.stringify(userData.user));\r\n            let tokenStr = \"Bearer \" + userData.token;\r\n            sessionStorage.setItem(\"token\", tokenStr);\r\n            return userData;\r\n        }));\r\n    }\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(\"email\");\r\n        return !(user === null);\r\n    }\r\n    logOut() {\r\n        sessionStorage.removeItem(\"email\");\r\n        sessionStorage.removeItem(\"user\");\r\n    }\r\n    async getCurrentUser() {\r\n        //let currentUser:User = JSON.parse(sessionStorage.getItem(\"user\")!) as User;\r\n        //return currentUser;\r\n        console.log(sessionStorage.getItem(\"email\"));\r\n        let currentUser;\r\n        await this.getUserByEmail(sessionStorage.getItem(\"email\")).subscribe(data => { currentUser = data; console.log(data); });\r\n        console.log(\"test: \" + currentUser);\r\n        return currentUser;\r\n    }\r\n}\r\nUserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.HttpClient)); };\r\nUserService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}