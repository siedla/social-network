{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\micha\\\\OneDrive\\\\Pulpit\\\\Kurs Spring\\\\task\\\\social-network\\\\src\\\\main\\\\ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.usersUrl = 'http://localhost:8081/users';\n  }\n\n  findAll() {\n    return this.http.get(this.usersUrl);\n  } //dokonczyc\n\n\n  findPostsByUserId() {\n    return this.http.get(this.usersUrl + \"/1/posts\");\n  }\n\n  getUserByEmail(email) {\n    return this.http.get(this.usersUrl + \"/email/\" + email);\n  }\n\n  findUserByName(firstName, lastName) {\n    return this.http.get(this.usersUrl + \"/\" + firstName + \"/\" + lastName);\n  }\n\n  addNewUser(user) {\n    return this.http.post('http://localhost:8081/signUp', user);\n  }\n\n  authenticate(email, password) {\n    return this.http.post(\"http://localhost:8081/authenticate\", {\n      email,\n      password\n    }).pipe(map(userData => {\n      sessionStorage.setItem(\"email\", email);\n      sessionStorage.setItem(\"user\", userData.user);\n      console.log(userData);\n      let tokenStr = \"Bearer \" + userData.token;\n      sessionStorage.setItem(\"token\", tokenStr);\n      console.log(userData);\n      return userData;\n    }));\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"email\");\n    return !(user === null);\n  }\n\n  logOut() {\n    sessionStorage.removeItem(\"email\");\n  }\n\n  getCurrentUser() {\n    return _asyncToGenerator(function* () {\n      return JSON.parse(localStorage.getItem(\"email\"));\n      ;\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/micha/OneDrive/Pulpit/Kurs Spring/task/social-network/src/main/ui/src/app/services/user.service.ts"],"names":["map","i0","i1","UserService","constructor","http","usersUrl","findAll","get","findPostsByUserId","getUserByEmail","email","findUserByName","firstName","lastName","addNewUser","user","post","authenticate","password","pipe","userData","sessionStorage","setItem","console","log","tokenStr","token","isUserLoggedIn","getItem","logOut","removeItem","getCurrentUser","JSON","parse","localStorage","ɵfac","UserService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,QAAoB,MAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,6BAAhB;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKF,IAAL,CAAUG,GAAV,CAAc,KAAKF,QAAnB,CAAP;AACH,GAPoB,CAQrB;;;AACAG,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAKJ,IAAL,CAAUG,GAAV,CAAc,KAAKF,QAAL,GAAgB,UAA9B,CAAP;AACH;;AACDI,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,KAAKN,IAAL,CAAUG,GAAV,CAAc,KAAKF,QAAL,GAAgB,SAAhB,GAA4BK,KAA1C,CAAP;AACH;;AACDC,EAAAA,cAAc,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAChC,WAAO,KAAKT,IAAL,CAAUG,GAAV,CAAc,KAAKF,QAAL,GAAgB,GAAhB,GAAsBO,SAAtB,GAAkC,GAAlC,GAAwCC,QAAtD,CAAP;AACH;;AACDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAO,KAAKX,IAAL,CAAUY,IAAV,CAAe,8BAAf,EAA+CD,IAA/C,CAAP;AACH;;AACDE,EAAAA,YAAY,CAACP,KAAD,EAAQQ,QAAR,EAAkB;AAC1B,WAAO,KAAKd,IAAL,CACFY,IADE,CACG,oCADH,EACyC;AAAEN,MAAAA,KAAF;AAASQ,MAAAA;AAAT,KADzC,EAEFC,IAFE,CAEGpB,GAAG,CAACqB,QAAQ,IAAI;AACtBC,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCZ,KAAhC;AACAW,MAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BF,QAAQ,CAACL,IAAxC;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,UAAIK,QAAQ,GAAG,YAAYL,QAAQ,CAACM,KAApC;AACAL,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCG,QAAhC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,aAAOA,QAAP;AACH,KARY,CAFN,CAAP;AAWH;;AACDO,EAAAA,cAAc,GAAG;AACb,QAAIZ,IAAI,GAAGM,cAAc,CAACO,OAAf,CAAuB,OAAvB,CAAX;AACA,WAAO,EAAEb,IAAI,KAAK,IAAX,CAAP;AACH;;AACDc,EAAAA,MAAM,GAAG;AACLR,IAAAA,cAAc,CAACS,UAAf,CAA0B,OAA1B;AACH;;AACKC,EAAAA,cAAc,GAAG;AAAA;AACnB,aAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACN,OAAb,CAAqB,OAArB,CAAX,CAAP;AACA;AAFmB;AAGtB;;AA5CoB;;AA8CzB1B,WAAW,CAACiC,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAInC,WAAV,EAAuBF,EAAE,CAACsC,QAAH,CAAYrC,EAAE,CAACsC,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACArC,WAAW,CAACsC,KAAZ,GAAoB,aAAcxC,EAAE,CAACyC,kBAAH,CAAsB;AAAEf,EAAAA,KAAK,EAAExB,WAAT;AAAsBwC,EAAAA,OAAO,EAAExC,WAAW,CAACiC,IAA3C;AAAiDQ,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { map } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class UserService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.usersUrl = 'http://localhost:8081/users';\r\n    }\r\n    findAll() {\r\n        return this.http.get(this.usersUrl);\r\n    }\r\n    //dokonczyc\r\n    findPostsByUserId() {\r\n        return this.http.get(this.usersUrl + \"/1/posts\");\r\n    }\r\n    getUserByEmail(email) {\r\n        return this.http.get(this.usersUrl + \"/email/\" + email);\r\n    }\r\n    findUserByName(firstName, lastName) {\r\n        return this.http.get(this.usersUrl + \"/\" + firstName + \"/\" + lastName);\r\n    }\r\n    addNewUser(user) {\r\n        return this.http.post('http://localhost:8081/signUp', user);\r\n    }\r\n    authenticate(email, password) {\r\n        return this.http\r\n            .post(\"http://localhost:8081/authenticate\", { email, password })\r\n            .pipe(map(userData => {\r\n            sessionStorage.setItem(\"email\", email);\r\n            sessionStorage.setItem(\"user\", userData.user);\r\n            console.log(userData);\r\n            let tokenStr = \"Bearer \" + userData.token;\r\n            sessionStorage.setItem(\"token\", tokenStr);\r\n            console.log(userData);\r\n            return userData;\r\n        }));\r\n    }\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(\"email\");\r\n        return !(user === null);\r\n    }\r\n    logOut() {\r\n        sessionStorage.removeItem(\"email\");\r\n    }\r\n    async getCurrentUser() {\r\n        return JSON.parse(localStorage.getItem(\"email\"));\r\n        ;\r\n    }\r\n}\r\nUserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.HttpClient)); };\r\nUserService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}